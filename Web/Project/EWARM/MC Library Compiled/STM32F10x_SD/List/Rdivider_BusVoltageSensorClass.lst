###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       13/Sep/2018  23:24:53
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\MCLibrary\src\Rdivider_BusVoltageSensorClass.c
#    Command line =  
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\MCLibrary\src\Rdivider_BusVoltageSensorClass.c
#        -D USE_STDPERIPH_DRIVER -D STM32F10X_MD -D MC_LIBRARY_SINGLE -lcN
#        "D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\MC Library
#        Compiled\STM32F10x_SD\List" -o
#        "D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\MC Library
#        Compiled\STM32F10x_SD\Obj" --debug --endian=little --cpu=Cortex-M3 -e
#        --fpu=None --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\ -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\..\MCLibrary\
#        -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\..\MCLibrary\inc\
#        -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\..\MCLibrary\interface\
#        -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\..\MCLibrary\interface\common\
#        -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\
#        -I
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\..\..\..\Common\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -Oh --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\MC Library
#        Compiled\STM32F10x_SD\List\Rdivider_BusVoltageSensorClass.lst
#    Object file  =  
#        D:\STM32\IAR_projects\stm32f103_demo_new\Web\Project\EWARM\MC Library
#        Compiled\STM32F10x_SD\Obj\Rdivider_BusVoltageSensorClass.o
#
###############################################################################

D:\STM32\IAR_projects\stm32f103_demo_new\Web\MCLibrary\src\Rdivider_BusVoltageSensorClass.c
      1          /**
      2            ******************************************************************************
      3            * @file    Rdivider_BusVoltageSensorClass.c
      4            * @author  STMicroelectronics - System Lab - MC Team
      5            * @version 4.3.0
      6            * @date    22-Sep-2016 15:29
      7            * @brief   This file contains private impelementation of Rdivider class      
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "BusVoltageSensorClass.h"
     30          #include "BusVoltageSensorPrivate.h"
     31          #include "Rdivider_BusVoltageSensorClass.h"
     32          #include "Rdivider_BusVoltageSensorPrivate.h"
     33          #include "MCLibraryConf.h"
     34          #include "MC_type.h"
     35          
     36          #define DCLASS_PARAMS ((_CRVBS_VBS)(((_CVBS) this)->DerivedClass))->pDParams_str
     37          #define DCLASS_VARS  ((_CRVBS_VBS)(((_CVBS) this)->DerivedClass))->DVars_str
     38          
     39          #define BCLASS_PARAMS ((_CVBS)this)->pParams_str
     40          #define BCLASS_VARS   ((_CVBS)this)->Vars_str
     41          
     42          #ifdef MC_CLASS_DYNAMIC
     43          	#include "stdlib.h" /* Used for dynamic allocation */
     44          #else
     45          	_CRVBS_VBS_t RVBS_VBSpool[MAX_RVBS_VBS_NUM];
     46          	unsigned char RVBS_VBS_Allocated = 0u;
     47          #endif
     48          
     49          static void RVBS_Init(CVBS this, CPWMC oPWMnCurrentSensor);
     50          static void RVBS_Clear(CVBS this);
     51          static uint16_t RVBS_CalcAvVbus(CVBS this);
     52          static uint16_t RVBS_CheckFaultState(CVBS this);
     53          
     54          /**
     55            * @brief  Creates an object of the class Rdivider
     56            * @param  pBusVoltageSensorParams pointer to an BusVoltageSensor parameters structure
     57            * @param  pRdividerParams pointer to an Rdivider parameters structure
     58            * @retval CRVBS_VBS new instance of Rdivider object
     59            */
     60          CRVBS_VBS RVBS_NewObject(pBusVoltageSensorParams_t pBusVoltageSensorParams, pRdividerParams_t pRdividerParams)
     61          {
     62          	_CVBS _oBusVoltageSensor;
     63          	_CRVBS_VBS _oRdivider;
     64          
     65          	_oBusVoltageSensor = (_CVBS)VBS_NewObject(pBusVoltageSensorParams);
     66          
     67          	#ifdef MC_CLASS_DYNAMIC
     68          		_oRdivider = (_CRVBS_VBS)calloc(1u,sizeof(_CRVBS_VBS_t));
     69          	#else
     70          		if (RVBS_VBS_Allocated  < MAX_RVBS_VBS_NUM)
     71          		{
     72          			_oRdivider = &RVBS_VBSpool[RVBS_VBS_Allocated++];
     73          		}
     74          		else
     75          		{
     76          			_oRdivider = MC_NULL;
     77          		}
     78          	#endif
     79            
     80          	_oRdivider->pDParams_str = pRdividerParams;
     81          	_oBusVoltageSensor->DerivedClass = (void*)_oRdivider;
     82                  
     83          	_oBusVoltageSensor->Methods_str.pVBS_Init = &RVBS_Init;
     84          	_oBusVoltageSensor->Methods_str.pVBS_Clear = &RVBS_Clear;
     85                  _oBusVoltageSensor->Methods_str.pVBS_CalcAvVbus = &RVBS_CalcAvVbus;
     86          
     87          	return ((CRVBS_VBS)_oBusVoltageSensor);
     88          }
     89          
     90          /** @addtogroup STM32F10x_PMSM_MC_Library
     91            * @{
     92            */
     93            
     94          /** @addtogroup BusVoltageSensor_Rdivider
     95            * @{
     96            */
     97          
     98          /** @defgroup Rdivider_class_private_methods Rdivider class private methods
     99          * @{
    100          */
    101          
    102          /**
    103            * @brief  It initializes bus voltage conversion (ADC channel, conversion time, 
    104            *         GPIO port and pin). It must be called only after PWMC_Init. 
    105            * @param  this related object of class CVBS
    106            * @retval none
    107            */
    108          static void RVBS_Init(CVBS this, CPWMC oPWMnCurrentSensor)
    109          {
    110            GPIO_InitTypeDef GPIO_InitStructure;
    111            ADConv_t ADConv_struct; 
    112            pDParams_t pDParams_str = DCLASS_PARAMS;
    113            
    114              /* GPIOs configurations --------------------------------------------------*/
    115            GPIO_StructInit(&GPIO_InitStructure);
    116            
    117            /****** Configure phase A ADC channel GPIO as analog input ****/
    118            GPIO_InitStructure.GPIO_Pin = pDParams_str->hVbusPin;  
    119            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    120            GPIO_Init(pDParams_str->hVbusPort, &GPIO_InitStructure);  
    121            
    122            DCLASS_VARS.oPWMnCurrentSensor = oPWMnCurrentSensor;
    123            /* Configure AD chaneel sampling time */
    124            ADConv_struct.Channel = pDParams_str->bVbusADChannel;
    125            ADConv_struct.SamplTime = pDParams_str->bVbusSamplingTime;
    126            PWMC_ADC_SetSamplingTime(oPWMnCurrentSensor, ADConv_struct);
    127            RVBS_Clear(this);
    128          }
    129          
    130          
    131          /**
    132            * @brief  It clears bus voltage FW variable containing average bus voltage 
    133            *         value
    134            * @param  this related object of class CVBS
    135            * @retval none
    136            */
    137          static void RVBS_Clear(CVBS this)
    138          {
    139            pDVars_t pDVars_str = &DCLASS_VARS;
    140            pDParams_t pDParams_str = DCLASS_PARAMS;
    141            pVars_t pVars_str = &BCLASS_VARS;
    142            uint16_t hAux;
    143            uint16_t i;
    144            
    145            /* Pre-charge initial value */
    146            hAux = PWMC_ExecRegularConv(pDVars_str->oPWMnCurrentSensor,
    147                                        pDParams_str->bVbusADChannel);
    148            
    149            if(hAux != 0xFFFFu)
    150            {
    151              pVars_str->hLatestConv = hAux;
    152              pVars_str->hAvBusVoltage_d = hAux;
    153            }
    154            
    155            for (i = 0u; i < pDParams_str->hLowPassFilterBW; i++)
    156            {
    157              RVBS_CalcAvVbus(this);
    158            }
    159          }
    160          
    161          /**
    162            * @brief  It actually performes the Vbus ADC conversion and updates average
    163            *         value
    164            * @param  this related object of class CVBS
    165            * @retval uint16_t Fault code error
    166            */
    167          static uint16_t RVBS_CalcAvVbus(CVBS this)
    168          {
    169            uint32_t wtemp;
    170            pDVars_t pDVars_str = &DCLASS_VARS;
    171            pDParams_t pDParams_str = DCLASS_PARAMS;
    172            pVars_t pVars_str = &BCLASS_VARS;
    173            uint16_t hAux;
    174             
    175            hAux = PWMC_ExecRegularConv(pDVars_str->oPWMnCurrentSensor,
    176                                                          pDParams_str->bVbusADChannel);
    177              
    178             if(hAux != 0xFFFFu)
    179             {
    180               pVars_str->hLatestConv = hAux;
    181               wtemp =  (uint32_t)(pDParams_str->hLowPassFilterBW)-1u;
    182               wtemp *= (uint32_t) (pVars_str->hAvBusVoltage_d);
    183               wtemp += pVars_str->hLatestConv;
    184               wtemp /= (uint32_t)(pDParams_str->hLowPassFilterBW);
    185               
    186               pVars_str->hAvBusVoltage_d = (uint16_t) wtemp;
    187             }
    188            
    189            pVars_str->hFaultState = RVBS_CheckFaultState(this);
    190            
    191            return(pVars_str->hFaultState);
    192          }
    193          
    194          /**
    195            * @brief  It returns MC_OVER_VOLT, MC_UNDER_VOLT or MC_NO_ERROR depending on
    196            *         bus voltage and protection threshold values
    197            * @param  this related object of class CVBS
    198            * @retval uint16_t Fault code error
    199            */
    200          static uint16_t RVBS_CheckFaultState(CVBS this)
    201          {
    202            uint16_t hFault;
    203            pDParams_t pDParams_str = DCLASS_PARAMS;  
    204            pVars_t pVars_str = &BCLASS_VARS;
    205          
    206            if(pVars_str->hAvBusVoltage_d > pDParams_str->hOverVoltageThreshold)
    207              {
    208                hFault = MC_OVER_VOLT;
    209              }
    210              else if (pVars_str->hAvBusVoltage_d < pDParams_str->hUnderVoltageThreshold)
    211              {
    212                hFault = MC_UNDER_VOLT;    
    213              }
    214              else
    215              {
    216                hFault = MC_NO_ERROR;    
    217              }  
    218            return hFault;
    219          }
    220          
    221          /**
    222            * @}
    223            */
    224            
    225          /**
    226            * @}
    227            */
    228          
    229          /**
    230            * @}
    231            */
    232          
    233          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RVBS_CalcAvVbus
        16   -> PWMC_ExecRegularConv
      16   RVBS_Clear
        16   -> PWMC_ExecRegularConv
        16   -> RVBS_CalcAvVbus
      24   RVBS_Init
        24   -> GPIO_Init
        24   -> GPIO_StructInit
        24   -> PWMC_ADC_SetSamplingTime
        24   -> RVBS_Clear
       8   RVBS_NewObject
         8   -> VBS_NewObject


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      76  RVBS_CalcAvVbus
      50  RVBS_Clear
      68  RVBS_Init
      48  RVBS_NewObject
      12  RVBS_VBS_Allocated
          RVBS_VBSpool

 
  12 bytes in section .bss
 246 bytes in section .text
 
 246 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
