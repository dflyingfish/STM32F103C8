###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       24/Mar/2017  23:52:29
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FOC 4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\MCLibrary\src\DigitalOutputClass_F30X.c
#    Command line =  
#        "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\MCLibrary\src\DigitalOutputClass_F30X.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F30X -D STM32F302x8 -D MC_LIBRARY_SINGLE
#        -D ARM_MATH_CM4 -lcN "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\MC Library Compiled\STM32F302X8_SD\List" -o
#        "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC LIB\Web\Project\EWARM\MC Library
#        Compiled\STM32F302X8_SD\Obj" --debug --endian=little --cpu=Cortex-M4
#        -e --fpu=VFPv4_sp --dlib_config "D:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.4\arm\INC\c\DLib_Config_Normal.h" -I
#        "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC LIB\Web\Project\EWARM\..\" -I
#        "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\..\..\MCLibrary\" -I "F:\FOC 4.3\v4.3.0\STM32
#        PMSM FOC LIB\Web\Project\EWARM\..\..\MCLibrary\inc\" -I "F:\FOC
#        4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\..\..\MCLibrary\protected_sources\inc\" -I
#        "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\..\..\MCLibrary\interface\" -I "F:\FOC
#        4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\..\..\MCLibrary\interface\common\" -I "F:\FOC
#        4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\..\..\..\Common\Libraries\CMSIS\CMSIS_2_x\Device\ST\STM32F30x\Include\"
#        -I "F:\FOC 4.3\v4.3.0\STM32 PMSM FOC
#        LIB\Web\Project\EWARM\..\..\..\Common\Libraries\STM32F30x_StdPeriph_Driver\inc\"
#        -Oh --use_c++_inline -I "D:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        F:\FOC 4.3\v4.3.0\STM32 PMSM FOC LIB\Web\Project\EWARM\MC Library
#        Compiled\STM32F302X8_SD\List\DigitalOutputClass_F30X.lst
#    Object file  =  
#        F:\FOC 4.3\v4.3.0\STM32 PMSM FOC LIB\Web\Project\EWARM\MC Library
#        Compiled\STM32F302X8_SD\Obj\DigitalOutputClass_F30X.o
#
###############################################################################

F:\FOC 4.3\v4.3.0\STM32 PMSM FOC LIB\Web\MCLibrary\src\DigitalOutputClass_F30X.c
      1          /**
      2            ******************************************************************************
      3            * @file    DigitalOutputClass.c
      4            * @author  STMicroelectronics - System Lab - MC Team
      5            * @version 4.3.0
      6            * @date    22-Sep-2016 15:29
      7            * @brief   This file contains interface of DigitalOutput class
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "DigitalOutputClass.h"
     30          #include "DigitalOutputClass_F30XPrivate.h"
     31          #include "MCLibraryConf.h"
     32          #include "MC_type.h"
     33          
     34          #define CLASS_VARS   ((_CDOUT)this)->Vars_str
     35          #define CLASS_PARAMS  ((_CDOUT)this)->pParams_str  
     36          
     37          #ifdef MC_CLASS_DYNAMIC
     38            #include "stdlib.h" /* Used for dynamic allocation */
     39          #else
     40            _CDOUT_t DOUTpool[MAX_DOUT_NUM];
     41            unsigned char DOUT_Allocated = 0u;
     42          #endif
     43          
     44          /**
     45            * @brief  Creates an object of the class DigitalOutput
     46            * @param  pDigitalOutputParams pointer to an DigitalOutput parameters structure
     47            * @retval CDOUT new instance of DigitalOutput object
     48            */
     49          CDOUT DOUT_NewObject(pDigitalOutputParams_t pDigitalOutputParams)
     50          {
     51            _CDOUT _oDOUT;
     52            
     53            #ifdef MC_CLASS_DYNAMIC
     54              _oDOUT = (_CDOUT)calloc(1u,sizeof(_CDOUT_t));
     55            #else
     56              if (DOUT_Allocated  < MAX_DOUT_NUM)
     57              {
     58                _oDOUT = &DOUTpool[DOUT_Allocated++];
     59              }
     60              else
     61              {
     62                _oDOUT = MC_NULL;
     63              }
     64            #endif
     65            
     66            _oDOUT->pParams_str = (pParams_t)pDigitalOutputParams;
     67            
     68            return ((CDOUT)_oDOUT);
     69          }
     70          
     71          /**
     72          * @brief  Initializes object variables, port and pin. It must be called only 
     73          *         after PWMnCurrFdbk object initialization and DigitalOutput object 
     74          *         creation. 
     75          * @param this related object of class CDOUT.
     76          * @retval none.
     77          */
     78          void DOUT_Init(CDOUT this)
     79          {
     80            GPIO_InitTypeDef GPIO_InitStructure;
     81            
     82            /* GPIOs configurations --------------------------------------------------*/
     83            GPIO_StructInit(&GPIO_InitStructure);
     84            
     85            /* Configure GPIO port and pin, clock it's supposed to be enabled in 
     86            PWMnCurrentFdbk object initialization */  
     87            GPIO_InitStructure.GPIO_Pin = CLASS_PARAMS->hDOutputPin;  
     88            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
     89            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
     90            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
     91            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
     92            GPIO_Init(CLASS_PARAMS->hDOutputPort, &GPIO_InitStructure);
     93            DOUT_SetOutputState(this, INACTIVE);
     94          }
     95          
     96          /**
     97          * @brief Accordingly with selected polarity, it sets to active or inactive the
     98          *        digital output
     99          * @param this related object of class CDOUT.
    100          * @param OutputState_t New requested state
    101          * @retval none
    102          */
    103          void DOUT_SetOutputState(CDOUT this, DOutputState_t State)
    104          {
    105            
    106            if(State == ACTIVE)
    107            {
    108              if(CLASS_PARAMS->bDOutputPolarity == DOutputActiveHigh)
    109              {
    110                GPIO_SetBits(CLASS_PARAMS->hDOutputPort,CLASS_PARAMS->hDOutputPin);
    111              }
    112              else
    113              {
    114                GPIO_ResetBits(CLASS_PARAMS->hDOutputPort,CLASS_PARAMS->hDOutputPin);     
    115              }
    116            }
    117            else
    118              if(CLASS_PARAMS->bDOutputPolarity == DOutputActiveHigh)
    119              {
    120                GPIO_ResetBits(CLASS_PARAMS->hDOutputPort,CLASS_PARAMS->hDOutputPin);
    121              }
    122              else
    123              {
    124                GPIO_SetBits(CLASS_PARAMS->hDOutputPort,CLASS_PARAMS->hDOutputPin);     
    125              }   
    126            CLASS_VARS.OutputState = State;
    127          }
    128          
    129          /**
    130          * @brief It returns the state of the digital output
    131          * @param this object of class DOUT
    132          * @retval OutputState_t Digital output state (ACTIVE or INACTIVE)
    133          */
    134          DOutputState_t DOUT_GetOutputState(CDOUT this)
    135          {
    136            return(CLASS_VARS.OutputState);
    137          }
    138          
    139          
    140          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DOUT_GetOutputState
      16   DOUT_Init
        16   -> GPIO_Init
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> GPIO_StructInit
       0   DOUT_NewObject
      16   DOUT_SetOutputState
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      44  DOUT_Allocated
          DOUTpool
       4  DOUT_GetOutputState
      70  DOUT_Init
      28  DOUT_NewObject
      44  DOUT_SetOutputState

 
  44 bytes in section .bss
 150 bytes in section .text
 
 150 bytes of CODE memory
  44 bytes of DATA memory

Errors: none
Warnings: none
