###############################################################################
#
# IAR ANSI C/C++ Compiler V7.60.1.11101/W32 for ARM       10/Jun/2017  21:35:23
# Copyright 1999-2016 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Application\src\STM32F10x_PFCInit.c
#    Command line =  
#        "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Application\src\STM32F10x_PFCInit.c" -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_HD -D USE_DAC -D USE_LCD -lcN
#        "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC LIB\Web\PFC_Project\EWARM\PFC
#        Application Compiled\List" -o "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\PFC Application Compiled\Obj" --debug
#        --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.4\arm\INC\c\DLib_Config_Normal.h" -I "F:\STM32F103 FOC v4.3.0\STM32
#        PMSM FOC LIB\Web\PFC_Project\EWARM\..\..\" -I "F:\STM32F103 FOC
#        v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\"
#        -I "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\PFC_Application\interface\" -I
#        "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\PFC_Application\inc\" -I "F:\STM32F103
#        FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\MCLibrary\interface\" -I "F:\STM32F103
#        FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\MCLibrary\interface\common\" -I
#        "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\MCApplication\" -I "F:\STM32F103 FOC
#        v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\MCApplication\inc\" -I "F:\STM32F103
#        FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\MCApplication\interface\" -I
#        "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\SystemDriveParams\" -I "F:\STM32F103
#        FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\..\Common\Libraries\STM32F10x_StdPeriph_Driver\inc\"
#        -I "F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\Project\" -I "F:\STM32F103 FOC
#        v4.3.0\STM32 PMSM FOC
#        LIB\Web\PFC_Project\EWARM\..\..\..\Common\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\"
#        -Oh --use_c++_inline -I "D:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.4\arm\CMSIS\Include\"
#    Locale       =  C
#    List file    =  
#        F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC LIB\Web\PFC_Project\EWARM\PFC
#        Application Compiled\List\STM32F10x_PFCInit.lst
#    Object file  =  
#        F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC LIB\Web\PFC_Project\EWARM\PFC
#        Application Compiled\Obj\STM32F10x_PFCInit.o
#
###############################################################################

F:\STM32F103 FOC v4.3.0\STM32 PMSM FOC LIB\Web\PFC_Application\src\STM32F10x_PFCInit.c
      1          /**
      2            ******************************************************************************
      3            * @file    STM32F10x_PFCInit.c
      4            * @author  STMicroelectronics - GCSA - IPD Motion Control Team - Shenzhen
      5            * @version 4.3.0
      6            * @date    22-Sep-2016 15:29
      7            * @brief   This file contains interface of PFC Module specific for STM32F1
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2016 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software
     20            * distributed under the License is distributed on an "AS IS" BASIS,
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "MC_type.h"
     30          #include "PIRegulatorClass.h"
     31          #include "StateMachineClass.h"
     32          #include "MCTuningClass.h"
     33          #include "MCInterfaceClass.h"
     34          
     35          #include "STM32F10x_PFCApplication.h"
     36          #include "Parameters conversion.h"
     37          
     38          #if defined(PFC_ENABLED)
     39          
     40          #include "PFCParameters.h"
     41          #include "PFCInit.h"
     42          
     43          #define TIMCK_NS ((1.0/TIM_CLK)*1000000000.0) /*!< duration of TIM clock period, ns*/
     44          #define MAINSFREQHYS 50.0
     45          #define MAINSFREQHITHR ((MAINSFREQ*10.0) + MAINSFREQHYS)
     46          #define MAINSFREQLOWTHR ((MAINSFREQ*10.0) - MAINSFREQHYS)
     47          #if TIMREMAPPING ==  GPIO_PartialRemap
     48          #undef TIMREMAPPING
     49          #define TIMREMAPPING GPIO_PartialRemap_TIM3
     50          #elif TIMREMAPPING ==  GPIO_FullRemap
     51          #undef TIMREMAPPING
     52          #define TIMREMAPPING GPIO_PartialRemap_TIM3
     53          #endif
     54          #define SWOVERCURRENTTH		20000    /*!< Software OverCurrent threshold, expressed in s16A */
     55          #define NOMINALCURRENTS16A 30000
     56          
     57          #if (SYNCFILTER <= 1)
     58          #define SYNCFILTER_IC   0
     59          #elif (SYNCFILTER <= 2)
     60          #define SYNCFILTER_IC   1
     61          #elif (SYNCFILTER <= 6)
     62          #define SYNCFILTER_IC   2
     63          #elif (SYNCFILTER <= 10)
     64          #define SYNCFILTER_IC   3
     65          #elif (SYNCFILTER <= 14)
     66          #define SYNCFILTER_IC   4
     67          #elif (SYNCFILTER <= 20)
     68          #define SYNCFILTER_IC   5
     69          #elif (SYNCFILTER <= 28)
     70          #define SYNCFILTER_IC   6
     71          #elif (SYNCFILTER <= 40)
     72          #define SYNCFILTER_IC   7
     73          #elif (SYNCFILTER <= 56)
     74          #define SYNCFILTER_IC   8
     75          #elif (SYNCFILTER <= 72)
     76          #define SYNCFILTER_IC   9
     77          #elif (SYNCFILTER <= 88)
     78          #define SYNCFILTER_IC   10
     79          #elif (SYNCFILTER <= 112)
     80          #define SYNCFILTER_IC   11
     81          #elif (SYNCFILTER <= 144)
     82          #define SYNCFILTER_IC   12
     83          #elif (SYNCFILTER <= 176)
     84          #define SYNCFILTER_IC   13
     85          #elif (SYNCFILTER <= 224)
     86          #define SYNCFILTER_IC   14
     87          #else
     88          #define SYNCFILTER_IC   15
     89          #endif
     90          
     91          #if (ETRFILTER <= 1)
     92          #define ETRFILTER_IC   0
     93          #elif (ETRFILTER <= 2)
     94          #define ETRFILTER_IC   1
     95          #elif (ETRFILTER <= 6)
     96          #define ETRFILTER_IC   2
     97          #elif (ETRFILTER <= 10)
     98          #define ETRFILTER_IC   3
     99          #elif (ETRFILTER <= 14)
    100          #define ETRFILTER_IC   4
    101          #elif (ETRFILTER <= 20)
    102          #define ETRFILTER_IC   5
    103          #elif (ETRFILTER <= 28)
    104          #define ETRFILTER_IC   6
    105          #elif (ETRFILTER <= 40)
    106          #define ETRFILTER_IC   7
    107          #elif (ETRFILTER <= 56)
    108          #define ETRFILTER_IC   8
    109          #elif (ETRFILTER <= 72)
    110          #define ETRFILTER_IC   9
    111          #elif (ETRFILTER <= 88)
    112          #define ETRFILTER_IC   10
    113          #elif (ETRFILTER <= 112)
    114          #define ETRFILTER_IC   11
    115          #elif (ETRFILTER <= 144)
    116          #define ETRFILTER_IC   12
    117          #elif (ETRFILTER <= 176)
    118          #define ETRFILTER_IC   13
    119          #elif (ETRFILTER <= 224)
    120          #define ETRFILTER_IC   14
    121          #else
    122          #define ETRFILTER_IC   15
    123          #endif
    124          
    125          
    126          PFCParams_t PFCParams =
    127          {
    128            /* Current reading A/D Conversions initialization --------------------------*/
    129            ADC_CLOCK_DIVIDER,              /*!< APB2 clock prescaling factor for
    130                                                 ADC peripheral. It must be RCC_PCLK2_DivX
    131                                                 x = 2, 4, 6, 8 */
    132            (uint8_t)ICHANNEL,              /*!< ADC channel used for conversion of
    133                                                 current. It must be equal to
    134                                                 ADC_Channel_x x= 0, ..., 15*/
    135            (GPIO_TypeDef*)IPORT,           /*!< GPIO port used by hIChannel. It must
    136                                                 be equal to GPIOx x= A, B, ...*/
    137            (uint16_t)IPIN,                 /*!< GPIO pin used by hIChannel. It must be
    138                                                 equal to GPIO_Pin_x x= 0, 1, ...*/
    139            (uint8_t)ISAMPLINGTIME,         /*!< Sampling time used to convert hIChannel.
    140                                                 It must be equal to ADC_SampleTime_xCycles5
    141                                                 x= 1, 7, ...*/
    142          
    143            (uint8_t)VMCHANNEL,             /*!< ADC channel used for conversion of
    144                                                 Mains Voltage. It must be equal to
    145                                                 ADC_Channel_x x= 0, ..., 15*/
    146            (GPIO_TypeDef*)VMPORT,          /*!< GPIO port used by hVMChannel. It must
    147                                                 be equal to GPIOx x= A, B, ...*/
    148            (uint16_t)VMPIN,                /*!< GPIO pin used by hVMChannel. It must be
    149                                                 equal to GPIO_Pin_x x= 0, 1, ...*/
    150            (uint8_t)VMSAMPLINGTIME,        /*!< Sampling time used to convert hVMChannel.
    151                                                 It must be equal to ADC_SampleTime_xCycles5
    152                                                 x= 1, 7, ...*/
    153          
    154            /* PWM generation parameters --------------------------------------------------*/
    155            (uint32_t)TIM_CLK,              /*!< CPU and TIM frequency, MHz*/
    156            (uint32_t)PWMFREQ,              /*!< PWM frequency expressed in Hertz*/
    157            (uint16_t)(TIM_CLK/PWMFREQ),		/*!< Timer ARR related to PFC PWM frequency*/
    158            (uint32_t)TIMREMAPPING,			    /*!< it remaps TIMx I/Os*/
    159            (uint16_t)PWMPOLARITY,          /*!< PMW output polarity, it must be
    160                                                 TIM_OCPolarity_High or TIM_OCPolarity_Low
    161          										                   according to power device driver */
    162            (GPIO_TypeDef*)PWMPORT,         /*!< PWM output port (as after re-mapping).
    163                                                 It must be GPIOx x= A, B, ...
    164          										                   It must be associated to TIMx CH1*/
    165            (uint16_t)PWMPIN,               /*!< PWM output pin (as after re-mapping).
    166                                                 It must be GPIO_Pin_x x= 0, 1, ...
    167          										                   It must be associated to TIMx CH1*/
    168          
    169            (FunctionalState)ETRFAULT,      /*!< It enable/disable the management of
    170                                                 an emergency input instantaneously
    171                                                 stopping PWM generation. It must be
    172                                                 either equal to ENABLE or DISABLE */
    173            (uint16_t)ETRPOLARITY,          /*!< ETR input polarity, according to
    174                                                 hardware protection polarity:
    175                                                 TIM_ExtTRGPolarity_Inverted,
    176                                                 TIM_ExtTRGPolarity_NonInverted*/
    177            (EXTITrigger_TypeDef)EXTIPOLARITY, /*!< EXTI input polarity, according to
    178                                                 hardware protection polarity:
    179                                                 EXTI_Trigger_Falling,
    180                                                 EXTI_Trigger_Rising*/
    181            (uint8_t)FAULTPOLARITY,         /*!< 1 if fault is on rising edge, 0
    182                                                 if fault is on falling edge*/
    183            (GPIO_TypeDef*)FAULTPORT,       /*!< Fault GPIO input
    184                                                 port (if used, after re-mapping).
    185                                                 It must be GPIOx x= A, B, ...*/
    186            (uint16_t)FAULTPIN,             /*!< Fault GPIO input pin
    187                                                 (if used, after re-mapping). It must be
    188                                                 GPIO_Pin_x x= 0, 1, ...*/
    189            (uint8_t)EXTIPORTSOURCE,        /*!< Fault GPIO input port, EXTI configuration*/
    190            (uint8_t)EXTIPINSOURCE,         /*!< Fault GPIO input pin, EXTI configuration*/
    191            (uint32_t)EXTILINE,             /*!< EXTI Line*/
    192            (uint8_t)EXTIIRQN,              /*!< EXTI interrupt no. */
    193            (uint16_t)ETRFILTER_IC,         /*!< Time filter applied to validate ETR.
    194                                                 This value defines the frequency used to sample
    195                                                 ETR input and the length of the digital
    196                                                 filter applied. The digital filter is made of an
    197                                                 event counter in which N events are needed to
    198                                                 validate a transition on the input.
    199                                                 0000: No filter, sampling is done at fCK_INT.
    200                                                 0001: fSAMPLING=fCK_INT , N=2.
    201                                                 0010: fSAMPLING=fCK_INT , N=4.
    202                                                 0011: fSAMPLING=fCK_INT , N=8.
    203                                                 0100: fSAMPLING=fCK_INT/2, N=6.
    204                                                 0101: fSAMPLING=fCK_INT/2, N=8.
    205                                                 0110: fSAMPLING=fCK_INT/4, N=6.
    206                                                 0111: fSAMPLING=fCK_INT/4, N=8.
    207                                                 1000: fSAMPLING=fCK_INT/8, N=6.
    208                                                 1001: fSAMPLING=fCK_INT/8, N=8.
    209                                                 1010: fSAMPLING=fCK_INT/16, N=5.
    210                                                 1011: fSAMPLING=fCK_INT/16, N=6.
    211                                                 1100: fSAMPLING=fCK_INT/16, N=8.
    212                                                 1101: fSAMPLING=fCK_INT/32, N=5.
    213                                                 1110: fSAMPLING=fCK_INT/32, N=6.
    214                                                 1111: fSAMPLING=fCK_INT/32, N=8 */
    215          
    216            /* VMAINS syncronization parameters ----------------------------------------*/
    217            (uint16_t)SYNCPOLARITY,         /*!< Syncronization circuit polarity, it must be
    218                                                 TIM_ICPolarity_Rising or TIM_ICPolarity_Falling */
    219            (GPIO_TypeDef*)SYNCPORT,        /*!< SYNC input port (as after re-mapping).
    220                                                 It must be GPIOx x= A, B, ...
    221          										                   It must be associated to TIMx CH2*/
    222            (uint16_t)SYNCPIN,              /*!< SYNC input pin (as after re-mapping).
    223                                                 It must be GPIO_Pin_x x= 0, 1, ...
    224          										                   It must be associated to TIMx CH2*/
    225            (uint16_t)SYNCFILTER_IC,        /*!< Time filter applied to validate SYNC.
    226                                                 This value defines the frequency used to sample
    227                                                 SYNC input and the length of the digital
    228                                                 filter applied. The digital filter is made of an
    229                                                 event counter in which N events are needed to
    230                                                 validate a transition on the input.
    231                                                 0000: No filter, sampling is done at fCK_INT.
    232                                                 0001: fSAMPLING=fCK_INT , N=2.
    233                                                 0010: fSAMPLING=fCK_INT , N=4.
    234                                                 0011: fSAMPLING=fCK_INT , N=8.
    235                                                 0100: fSAMPLING=fCK_INT/2, N=6.
    236                                                 0101: fSAMPLING=fCK_INT/2, N=8.
    237                                                 0110: fSAMPLING=fCK_INT/4, N=6.
    238                                                 0111: fSAMPLING=fCK_INT/4, N=8.
    239                                                 1000: fSAMPLING=fCK_INT/8, N=6.
    240                                                 1001: fSAMPLING=fCK_INT/8, N=8.
    241                                                 1010: fSAMPLING=fCK_INT/16, N=5.
    242                                                 1011: fSAMPLING=fCK_INT/16, N=6.
    243                                                 1100: fSAMPLING=fCK_INT/16, N=8.
    244                                                 1101: fSAMPLING=fCK_INT/32, N=5.
    245                                                 1110: fSAMPLING=fCK_INT/32, N=6.
    246                                                 1111: fSAMPLING=fCK_INT/32, N=8 */
    247          
    248            /* PFC Control Parameters --------------------------------------------------*/
    249            (uint8_t)(PWMFREQ/CURRCTRLFREQUENCY),	/*!< Ratio PWM frequency to Current
    250            				                             control frequency */
    251            (uint8_t)(SYS_TICK_FREQUENCY/VOLTCTRLFREQUENCY), /*!< Ratio PFC_Scheduler()
    252                                                 frequency to Voltage control frequency */
    253            (int16_t)(NOMINALCURRENTS16A),  /*!< Output nominal current in s16A */
    254          	{
    255            		(int16_t)PID_CURR_KP_DEFAULT, /*!< Default Kp gain, used to initialize Kp gain
    256                                                 software variable*/
    257            		(int16_t)PID_CURR_KI_DEFAULT, /*!< Default Ki gain, used to initialize Ki gain
    258                                                 software variable*/
    259            		(uint16_t)CURR_KPDIV,       /*!< Kp gain divisor, used in conjuction with
    260                                                 Kp gain allows obtaining fractional values.
    261                                                 If FULL_MISRA_C_COMPLIANCY is not defined
    262                                                 the divisor is implemented through
    263                                                 algebrical right shifts to speed up PI
    264                                                 execution. Only in this case this parameter
    265                                                 specifies the number of right shifts to be
    266                                                 executed */
    267            		(uint16_t)CURR_KIDIV,       /*!< Ki gain divisor, used in conjuction with
    268                                                 Ki gain allows obtaining fractional values.
    269                                                 If FULL_MISRA_C_COMPLIANCY is not defined
    270                                                 the divisor is implemented through
    271                                                 algebrical right shifts to speed up PI
    272                                                 execution. Only in this case this parameter
    273                                                 specifies the number of right shifts to be
    274                                                 executed */
    275            		(int32_t)S16_MAX * CURR_KIDIV,/*!< Upper limit used to saturate the integral
    276                                                 term given by Ki / Ki divisor * integral of
    277                                                 process variable error */
    278            		(int32_t)(-S16_MAX) * CURR_KIDIV,/*!< Lower limit used to saturate the integral
    279                                                 term given by Ki / Ki divisor * integral of
    280                                                 process variable error */
    281            		S16_MAX,                    /*!< Upper limit used to saturate the PI output*/
    282            		0,                          /*!< Lower limit used to saturate the PI output*/
    283            (uint16_t)LOG2(CURR_KPDIV),     /*!< Kp gain divisor expressed as power of 2.
    284                                                 E.g. if gain divisor is 512 the value
    285                                                 must be 9 because 2^9 = 512 */
    286            (uint16_t)LOG2(CURR_KIDIV)      /*!< Ki gain divisor expressed as power of 2.
    287                                                 E.g. if gain divisor is 512 the value
    288                                                 must be 9 because 2^9 = 512 */
    289          	},
    290          	{
    291            		(int16_t)PID_VOLT_KP_DEFAULT,/*!< Default Kp gain, used to initialize Kp gain
    292                                                 software variable*/
    293            		(int16_t)PID_VOLT_KI_DEFAULT,/*!< Default Ki gain, used to initialize Ki gain
    294                                                 software variable*/
    295            		(uint16_t)VOLT_KPDIV,       /*!< Kp gain divisor, used in conjuction with
    296                                                 Kp gain allows obtaining fractional values.
    297                                                 If FULL_MISRA_C_COMPLIANCY is not defined
    298                                                 the divisor is implemented through
    299                                                 algebrical right shifts to speed up PI
    300                                                 execution. Only in this case this parameter
    301                                                 specifies the number of right shifts to be
    302                                                 executed */
    303            		(uint16_t)VOLT_KIDIV,       /*!< Ki gain divisor, used in conjuction with
    304                                                 Ki gain allows obtaining fractional values.
    305                                                 If FULL_MISRA_C_COMPLIANCY is not defined
    306                                                 the divisor is implemented through
    307                                                 algebrical right shifts to speed up PI
    308                                                 execution. Only in this case this parameter
    309                                                 specifies the number of right shifts to be
    310                                                 executed */
    311            		(int32_t)NOMINALCURRENTS16A * VOLT_KIDIV,/*!< Upper limit used to saturate the integral
    312                                                 term given by Ki / Ki divisor * integral of
    313                                                 process variable error */
    314            		(int32_t)(-NOMINALCURRENTS16A) * VOLT_KIDIV,/*!< Lower limit used to saturate the integral
    315                                                 term given by Ki / Ki divisor * integral of
    316                                                 process variable error */
    317            		(int16_t)NOMINALCURRENTS16A,/*!< Upper limit used to saturate the PI output */
    318            		(int16_t)(-NOMINALCURRENTS16A),/*!< Lower limit used to saturate the PI output */
    319            (uint16_t)LOG2(VOLT_KPDIV),         /*!< Kp gain divisor expressed as power of 2.
    320                                                 E.g. if gain divisor is 512 the value
    321                                                 must be 9 because 2^9 = 512 */
    322            (uint16_t)LOG2(VOLT_KIDIV)      /*!< Ki gain divisor expressed as power of 2.
    323                                                 E.g. if gain divisor is 512 the value
    324                                                 must be 9 because 2^9 = 512 */
    325          	},
    326            (int16_t)((STARTUPDURATION*0.001)*(VOLTCTRLFREQUENCY*1.0)), /*!< Default duration of PFC startup
    327                                                 phase, expressed in voltage loops */
    328            (int16_t)VOLTAGEREFERENCE,      /*!< Default Boost Voltage reference,
    329                                                 expressed in Volts */
    330            (uint16_t)MAINSFREQLOWTHR,      /*!< Min Mains frequency allowed for PFC
    331                                                 operations, expressed in tenth of Hz */
    332            (uint16_t)MAINSFREQHITHR,       /*!< Max Mains frequency allowed for PFC
    333                                                 operations, expressed in tenth of Hz */
    334            (int16_t)VMAINSAMPLLOWTH,       /*!< Min Mains voltage amplitude allowed for
    335                                                 PFC operations, expressed in Volts */
    336            (int16_t)VMAINSAMPLHITH,        /*!< Max Mains voltage amplitude allowed for
    337                                                 PFC operations, expressed in Volts */
    338            (int16_t)OUTPUTPOWERACTIVATION, /*!< Output power for PFC activation,
    339                                                 expressed in Watts */
    340            (int16_t)OUTPUTPOWERDEACTIVATION,/*!< Output power for PFC deactivation,
    341                                                 expressed in Watts */
    342            (int16_t)(SWOVERVOLTAGETH*10),  /*!< Software OverVoltage threshold,
    343                                                 expressed in Volts */
    344            (int16_t)SWOVERCURRENTTH,       /*!< Software OverCurrent threshold,
    345                                                 expressed in s16A */
    346            (uint16_t)(PROPDELAYON/TIMCK_NS),/*!< Latency at PFC switch turn-on, TIM clock cycles*/
    347            (uint16_t)(PROPDELAYOFF/TIMCK_NS),/*!< Latency at PFC switch turn-off, TIM clock cycles*/
    348            (uint16_t)(TIM_CLK/(ADC_CLK_MHz*1000000.0)*ISAMPLINGTIMEREAL),   /*!< ADC sampling time, TIM clock cycles*/
    349            (uint16_t)(TIM_CLK/(ADC_CLK_MHz*1000000.0)*12), /*!< ADC conversion time, TIM clock cycles*/
    350            (uint16_t)(TIM_CLK/(ADC_CLK_MHz*1000000.0)*3),    /*!< ADC latency time, TIM clock cycles*/
    351            (uint16_t)(32767.0/(3.3 * VMAINS_PARTITIONING_FACTOR)),  /*!< It is used to convert bus voltage from
    352                                                 u16Volts into real Volts (V).
    353                                                 1 u16Volt = 65536/hConversionFactor Volts
    354                                                 For real sensors hConversionFactor it's
    355                                                 equal to the product between the expected MCU
    356                                                 voltage and the partioning network
    357                                                 attenuation*/
    358            (uint16_t)((PFCSHUNTRESISTOR*PFCAMPLGAIN*65536.0)/3.3) /*!< it's used to convert AC mains current from
    359                                                 u16Amps into real Amperes (A)*/
    360          };
    361          
    362          /**
    363            * @brief  It initializes the PFC application. It must be called only after
    364            *         Motor Control Application initialization (MC_Boot)
    365            * @param  oMCT CMCT object, motor drive coordinated with PFC
    366            * @param  oMCT CMCT object, motor drive coordinated with PFC
    367            * @param  pBusVoltage pointer, if PFC doesn't receive coordinated MC objects
    368            * @retval none
    369            */
    370          void PFC_Boot(CMCT oMCT1, CMCT oMCT2, int16_t *pBusVoltage)
    371          {
    372            PFC_Init(&PFCParams,oMCT1,oMCT2,pBusVoltage);
    373          }
    374          
    375          #endif
    376          
    377          /******************* (C) COPYRIGHT 2016 STMicroelectronics *****END OF FILE****/
    378          


 

 


Errors: none
Warnings: none
